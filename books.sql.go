// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: books.sql

package main

import (
	"context"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (
  name
) VALUES (
  ?
)
RETURNING id, name, author, summary, cover, created_at, updated_at, deleted_at
`

func (q *Queries) CreateBook(ctx context.Context, name *string) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook, name)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Author,
		&i.Summary,
		&i.Cover,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
UPDATE books
SET deleted_at = datetime('now')
WHERE id = ?
`

func (q *Queries) DeleteBook(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const getBook = `-- name: GetBook :one
SELECT id, name, author, summary, cover, created_at, updated_at, deleted_at FROM books
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) GetBook(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Author,
		&i.Summary,
		&i.Cover,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listBooks = `-- name: ListBooks :many
SELECT id, name, author, summary, cover, created_at, updated_at, deleted_at FROM books
WHERE deleted_at IS NULL
ORDER BY id
LIMIT 10 OFFSET ?
`

func (q *Queries) ListBooks(ctx context.Context, offset int64) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, listBooks, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Author,
			&i.Summary,
			&i.Cover,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :one
UPDATE books
SET name = coalesce(@name, name),
    summary = coalesce(@summary, summary),
    cover = coalesce(@cover, cover)
WHERE id = ?
RETURNING id, name, author, summary, cover, created_at, updated_at, deleted_at
`

type UpdateBookParams struct {
	Name    *string `json:"name"`
	Summary *string `json:"summary"`
	Cover   *string `json:"cover"`
	ID      int64   `json:"id"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateBook,
		arg.Name,
		arg.Summary,
		arg.Cover,
		arg.ID,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Author,
		&i.Summary,
		&i.Cover,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
