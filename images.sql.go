// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: images.sql

package main

import (
	"context"
)

const createImage = `-- name: CreateImage :one
INSERT INTO images (book_id, chapter_id, slug)
VALUES (?, ?, ?)
RETURNING id, book_id, chapter_id, slug, created_at, updated_at, deleted_at
`

type CreateImageParams struct {
	BookID    *int64  `json:"book_id"`
	ChapterID *int64  `json:"chapter_id"`
	Slug      *string `json:"slug"`
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, createImage, arg.BookID, arg.ChapterID, arg.Slug)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.ChapterID,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getImageBySlug = `-- name: GetImageBySlug :one
SELECT id, book_id, chapter_id, slug, created_at, updated_at, deleted_at FROM images
WHERE slug = ?
AND deleted_at IS NULL
`

func (q *Queries) GetImageBySlug(ctx context.Context, slug *string) (Image, error) {
	row := q.db.QueryRowContext(ctx, getImageBySlug, slug)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.ChapterID,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listImagesForBook = `-- name: ListImagesForBook :many
SELECT id, book_id, chapter_id, slug, created_at, updated_at, deleted_at FROM images
WHERE book_id = ?
AND deleted_at IS NULL
ORDER BY id
`

func (q *Queries) ListImagesForBook(ctx context.Context, bookID *int64) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, listImagesForBook, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.ChapterID,
			&i.Slug,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
