// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: chapters.sql

package main

import (
	"context"
)

const createChapter = `-- name: CreateChapter :one
INSERT INTO chapters (
  book_id,
  name,
  content,
  parent_id
) VALUES (
  ?,
  ?,
  ?,
  ?
)
RETURNING id, name, book_id, parent_id, sequence, content, created_at, updated_at, deleted_at
`

type CreateChapterParams struct {
	BookID   *int64  `json:"book_id"`
	Name     *string `json:"name"`
	Content  *string `json:"content"`
	ParentID *int64  `json:"parent_id"`
}

func (q *Queries) CreateChapter(ctx context.Context, arg CreateChapterParams) (Chapter, error) {
	row := q.db.QueryRowContext(ctx, createChapter,
		arg.BookID,
		arg.Name,
		arg.Content,
		arg.ParentID,
	)
	var i Chapter
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BookID,
		&i.ParentID,
		&i.Sequence,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteChapter = `-- name: DeleteChapter :exec
UPDATE chapters
SET deleted_at = date('now')
WHERE id = ?
`

func (q *Queries) DeleteChapter(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteChapter, id)
	return err
}

const listChapters = `-- name: ListChapters :many
SELECT id, name, book_id, parent_id, sequence, content, created_at, updated_at, deleted_at FROM chapters
WHERE book_id = ?
AND deleted_at IS NULL
ORDER BY id
`

func (q *Queries) ListChapters(ctx context.Context, bookID *int64) ([]Chapter, error) {
	rows, err := q.db.QueryContext(ctx, listChapters, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chapter
	for rows.Next() {
		var i Chapter
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BookID,
			&i.ParentID,
			&i.Sequence,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChapter = `-- name: UpdateChapter :one
UPDATE chapters
SET name = coalesce(@name, name),
    content = coalesce(@content, content)
WHERE id = ?
RETURNING id, name, book_id, parent_id, sequence, content, created_at, updated_at, deleted_at
`

type UpdateChapterParams struct {
	Name    *string `json:"name"`
	Content *string `json:"content"`
	ID      int64   `json:"id"`
}

func (q *Queries) UpdateChapter(ctx context.Context, arg UpdateChapterParams) (Chapter, error) {
	row := q.db.QueryRowContext(ctx, updateChapter, arg.Name, arg.Content, arg.ID)
	var i Chapter
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BookID,
		&i.ParentID,
		&i.Sequence,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
