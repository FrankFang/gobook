// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: covers.sql

package main

import (
	"context"
)

const createCover = `-- name: CreateCover :one
INSERT INTO covers (book_id, slug)
VALUES (?, ?)
RETURNING id, book_id, slug, created_at, updated_at, deleted_at
`

type CreateCoverParams struct {
	BookID *int64  `json:"book_id"`
	Slug   *string `json:"slug"`
}

func (q *Queries) CreateCover(ctx context.Context, arg CreateCoverParams) (Cover, error) {
	row := q.db.QueryRowContext(ctx, createCover, arg.BookID, arg.Slug)
	var i Cover
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCoverBySlug = `-- name: GetCoverBySlug :one
SELECT id, book_id, slug, created_at, updated_at, deleted_at FROM covers WHERE slug = ? AND deleted_at IS NULL
`

func (q *Queries) GetCoverBySlug(ctx context.Context, slug *string) (Cover, error) {
	row := q.db.QueryRowContext(ctx, getCoverBySlug, slug)
	var i Cover
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
